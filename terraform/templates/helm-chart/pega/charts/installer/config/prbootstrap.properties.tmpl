install.{{ .Env.DB_TYPE }}.schema={{ .Env.DATA_SCHEMA }}
initialization.settingsource=file
com.pega.pegarules.priv.LogHelper.USE_LOG4JV2=true
maxIdle={{ .Env.MAX_IDLE }}
com.pega.pegarules.bootstrap.engineclasses.tablename={{ .Env.RULES_SCHEMA }}.pr_engineclasses
install.{{ .Env.DB_TYPE }}.rulesSchema={{ .Env.RULES_SCHEMA }}
maxWait={{ .Env.MAX_WAIT }}
install.{{ .Env.DB_TYPE }}.url={{ .Env.JDBC_URL }}
maxActive={{ .Env.MAX_ACTIVE }}
install.{{ .Env.DB_TYPE }}.username={{ .Env.DB_USERNAME }}
{{ .Env.DB_TYPE }}.jdbc.class={{ .Env.JDBC_CLASS }}
com.pega.pegarules.bootstrap.assembledclasses.tablename={{ .Env.RULES_SCHEMA }}.pr_assembledclasses
com.pega.pegarules.bootstrap.assembledclasses.dbcpsource=install.{{ .Env.DB_TYPE }}
com.pega.pegarules.bootstrap.tempdir=/opt/pega/temp
poolPreparedStatements=true
install.{{ .Env.DB_TYPE }}.connectionProperties={{ .Env.JDBC_CUSTOM_CONNECTION }}
install.{{ .Env.DB_TYPE }}.password={{ .Env.DB_PASSWORD }}

# When we bypass loading engine classes into database, then while querying also, we should not
# look into db. Instead we need to load engine classes from file system only.
# We cannot leave it to empty string as it causes validation failures in engine.
# With engine code set version set to FS_ONLY, we ensure engine classes gets loaded from packed engine
{{- if isTrue .Env.BYPASS_LOAD_ENGINE_CLASSES }}
com.pega.pegarules.bootstrap.codeset.version.Pega-EngineCode=FS_ONLY
{{- else }}
com.pega.pegarules.bootstrap.codeset.version.Pega-EngineCode={{ .Env.CODESET_VERSION }}
{{- end }}
com.pega.pegarules.bootstrap.engineclasses.dbcpsource=install.{{ .Env.DB_TYPE }}
